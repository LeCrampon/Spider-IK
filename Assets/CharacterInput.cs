//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/CharacterInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @CharacterInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @CharacterInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""CharacterInput"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""b1ecff15-7904-4839-b654-b8171068177d"",
            ""actions"": [
                {
                    ""name"": ""MoveArm"",
                    ""type"": ""Value"",
                    ""id"": ""a089e059-c348-41c2-b193-7e4abce0067a"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""GripLeftArm"",
                    ""type"": ""Button"",
                    ""id"": ""fed2b97e-6164-4dcd-86f9-71e5cad6fac5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""GripRightArm"",
                    ""type"": ""Button"",
                    ""id"": ""2a6487a8-6056-4b3c-a06d-3fcf77b7f81f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""57150908-7aa1-470f-8776-3b755fdf702b"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveArm"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""99a6c4cb-b9f0-40f0-88b1-8da52c4eef73"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GripLeftArm"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c927160f-66aa-4904-9fda-fdd92369f15c"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GripRightArm"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_MoveArm = m_Player.FindAction("MoveArm", throwIfNotFound: true);
        m_Player_GripLeftArm = m_Player.FindAction("GripLeftArm", throwIfNotFound: true);
        m_Player_GripRightArm = m_Player.FindAction("GripRightArm", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private IPlayerActions m_PlayerActionsCallbackInterface;
    private readonly InputAction m_Player_MoveArm;
    private readonly InputAction m_Player_GripLeftArm;
    private readonly InputAction m_Player_GripRightArm;
    public struct PlayerActions
    {
        private @CharacterInput m_Wrapper;
        public PlayerActions(@CharacterInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @MoveArm => m_Wrapper.m_Player_MoveArm;
        public InputAction @GripLeftArm => m_Wrapper.m_Player_GripLeftArm;
        public InputAction @GripRightArm => m_Wrapper.m_Player_GripRightArm;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterface != null)
            {
                @MoveArm.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMoveArm;
                @MoveArm.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMoveArm;
                @MoveArm.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMoveArm;
                @GripLeftArm.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnGripLeftArm;
                @GripLeftArm.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnGripLeftArm;
                @GripLeftArm.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnGripLeftArm;
                @GripRightArm.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnGripRightArm;
                @GripRightArm.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnGripRightArm;
                @GripRightArm.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnGripRightArm;
            }
            m_Wrapper.m_PlayerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @MoveArm.started += instance.OnMoveArm;
                @MoveArm.performed += instance.OnMoveArm;
                @MoveArm.canceled += instance.OnMoveArm;
                @GripLeftArm.started += instance.OnGripLeftArm;
                @GripLeftArm.performed += instance.OnGripLeftArm;
                @GripLeftArm.canceled += instance.OnGripLeftArm;
                @GripRightArm.started += instance.OnGripRightArm;
                @GripRightArm.performed += instance.OnGripRightArm;
                @GripRightArm.canceled += instance.OnGripRightArm;
            }
        }
    }
    public PlayerActions @Player => new PlayerActions(this);
    public interface IPlayerActions
    {
        void OnMoveArm(InputAction.CallbackContext context);
        void OnGripLeftArm(InputAction.CallbackContext context);
        void OnGripRightArm(InputAction.CallbackContext context);
    }
}
